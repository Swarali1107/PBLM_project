import cv2
import numpy as np

# Constants
VIDEO_FILE = '../PBLM_project/vid.mp4'
MIN_WIDTH_RECT = 80
MIN_HEIGHT_RECT = 80
COUNT_LINE_POSITION = 400
OFFSET = 6

def center_point(x, y, w, h):
    x1 = int(w / 2)
    y1 = int(h / 2)
    cx = x + x1
    cy = y + y1
    return cx, cy

# Initialize video capture
cap = cv2.VideoCapture(VIDEO_FILE)
if not cap.isOpened():
    print("Error: Unable to open video file.")
    exit()

# Initialize background subtractor
algo = cv2.bgsegm.createBackgroundSubtractorMOG()        

# Variables
detect = []
counter = 0

# Main loop
while True:
    ret, frame = cap.read()
    if not ret:
        print("Error: Unable to read frame.")
        break

    grey = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    blur = cv2.GaussianBlur(grey, (3, 3), 5)
    img_sub = algo.apply(blur)
    dilat = cv2.dilate(img_sub, np.ones((5, 5), np.uint8))
    kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (5, 5))
    dilatada = cv2.morphologyEx(dilat, cv2.MORPH_CLOSE, kernel)
    dilatada = cv2.morphologyEx(dilatada, cv2.MORPH_CLOSE, kernel)
    counterShape, _ = cv2.findContours(dilatada, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)

    cv2.line(frame, (100, COUNT_LINE_POSITION), (550, COUNT_LINE_POSITION), (255, 127, 0), 3)

    for (_, c) in enumerate(counterShape):
        (x, y, w, h) = cv2.boundingRect(c)
        validate_counter = (w >= MIN_WIDTH_RECT) and (h >= MIN_HEIGHT_RECT)
        if not validate_counter:
            continue

        cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 255), 2)

        center = center_point(x, y, w, h)
        detect.append(center)
        cv2.circle(frame, center, 2, (0, 0, 255), -1)

        for (x, y) in detect:
            if y < (COUNT_LINE_POSITION + OFFSET) and y > (COUNT_LINE_POSITION + OFFSET):
                counter += 1
            detect.remove((x, y))
            print("Vehicle Counter:" + str(counter))

    cv2.putText(frame, "Vehicle Counter :" + str(counter), (450, 70), cv2.FONT_HERSHEY_SIMPLEX, 2, (0, 0, 255), 5)
    cv2.imshow('Video Original', frame)

    if cv2.waitKey(1) == 13:
        break

# Release resources
cap.release()
cv2.destroyAllWindows()
